#!/bin/bash

## See the file LICENCE for copying conditions.

# This script assumes that you have already downloaded trusted public keys and saved them to $bitcoind_keys_folder

# Settings
bitcoind_version="22.0"
bitcoind_folder="bitcoind"
bitcoind_keys_folder="bitcoind-pub-keys"
data_file="${bitcoind_folder}/bitcoin-${bitcoind_version}-x86_64-linux-gnu.tar.gz"
sig_file="${bitcoind_folder}/SHA256SUMS_2.asc"


# Key trust settings
#   The verification will fail unless all keys listed in $bitcoind_trusted_key_hashes check out
#   The script will ignore verifying keys listed in $bitcoind_untrusted_key_hashes
#   From the remaining keys (all keys - trusted keys - untrusted keys) at least $bitcoind_acceptable_fails number of keys needs to check out
bitcoind_trusted_key_hashes="152812300785C96444D3334D17565732E08E5E41 D1DBF2C4B96F2DEBF4C16654410108112E7EA81F CFB16E21C950F67FA95E558F2EEB9F5CC09526C1"
bitcoind_untrusted_key_hashes="0CCBAAFD76A2ECE2CCD3141DE2FFD5B1D88CA97D"
bitcoind_min_confirm=4


# Downloads a file if it does not already exist, exits if the download fails
# Usage:
#  download URL FOLDERNAME FILENAME
download() {
   # Download source code (unless it already exists)
   if [ ! -f $2/$3 ]; then
      wget -q --https-only $1 --directory-prefix $2/

      # check that the download succeeded
      if [ $? -ne 0 ]; then
        echo "  Could not download $1"
        exit 1
      else
        echo "  Downloaded $2/$2"
      fi
   else
      echo "  Using existing $2/$3"
   fi
}


## Download source code
bitcoind_begin() {
   echo "$FUNCNAME: BEGIN"

   # Create folder for the bitcoind files
   mkdir --parents $bitcoind_folder
   chmod --recursive 700 $bitcoind_folder
   test -d $bitcoind_folder

   echo "$FUNCNAME: Downloading source files"

   download https://bitcoincore.org/bin/bitcoin-core-${bitcoind_version}/bitcoin-${bitcoind_version}-x86_64-linux-gnu.tar.gz \
      $bitcoind_folder \
      bitcoin-${bitcoind_version}-x86_64-linux-gnu.tar.gz

   download https://bitcoincore.org/bin/bitcoin-core-${bitcoind_version}/SHA256SUMS \
      $bitcoind_folder \
      SHA256SUMS

   download https://bitcoincore.org/bin/bitcoin-core-${bitcoind_version}/SHA256SUMS.asc \
      $bitcoind_folder \
      SHA256SUMS.asc


   echo "$FUNCNAME: Verifying archive checksum"
   # This is just done so that we are testing against the files the server claims are the correct ones
   (
   cd $bitcoind_folder || exit 1
   if ! sha256sum --status --ignore-missing --check SHA256SUMS; then
     echo "  File integrity check failed" >&2
     exit 1
   else
     echo "  Checksum OK"
   fi
   )

   echo "$FUNCNAME: END"
}

## The actual verification function. Let gpg-bash do the heavy lifting.
bitcoind_verification() {
   echo "$FUNCNAME: BEGIN"

   ## Set a few variables, that gpg-bash will read.
   gpg_bash_lib_input_key_import_dir=$bitcoind_keys_folder
   gpg_bash_lib_input_file_name_enforce="true"
   gpg_bash_lib_input_cleanup="true"
   gpg_bash_lib_input_data_file=$data_file
   gpg_bash_lib_input_sig_file=$sig_file

   ## Source gpg-bash, so functions provided by it become available to your
   ## script. You could also do the sourcing at any earlier point at your
   ## convenience.
   source "../gpg-bash"

   ## Run gpg-bash to let it do the verification for you.
   gpg_bash_lib_function_main_verify

   echo "$FUNCNAME: END"
}

bitcoind_output() {
   echo "$FUNCNAME: BEGIN"

   ## This is an example on how you can access variables, that gpg-bash has
   ## set for you. There are more variables available. Those are listed in
   ## the documentation.

   echo "\
gpg_bash_lib_output_failure_status: $gpg_bash_lib_output_failure_status
gpg_bash_lib_output_gpg_verify_exit_code: $gpg_bash_lib_output_gpg_verify_exit_code
gpg_bash_lib_output_validsig_status: $gpg_bash_lib_output_validsig_status
gpg_bash_lib_output_fingerprint_in_hex: $gpg_bash_lib_output_fingerprint_in_hex
gpg_bash_lib_output_signed_on_unixtime: $gpg_bash_lib_output_signed_on_unixtime
gpg_bash_lib_output_signed_on_date: $gpg_bash_lib_output_signed_on_date
gpg_bash_lib_output_notation[$"file@name"]: ${gpg_bash_lib_output_notation[$"file@name"]}
gpg_bash_lib_output_file_name_tampering: $gpg_bash_lib_output_file_name_tampering
gpg_bash_lib_output_freshness_status: $gpg_bash_lib_output_freshness_status
gpg_bash_lib_output_freshness_detail: $gpg_bash_lib_output_freshness_detail
gpg_bash_lib_output_freshness_msg:
$gpg_bash_lib_output_freshness_msg
gpg_bash_lib_output_alright_status: $gpg_bash_lib_output_alright_status"

   echo "$FUNCNAME: END"
}

bitcoind_begin
bitcoind_verification
bitcoind_output

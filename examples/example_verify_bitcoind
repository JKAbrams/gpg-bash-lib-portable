#!/bin/bash

## See the file LICENCE for copying conditions.

# This script assumes that you have already downloaded trusted public keys and saved them to $bitcoind_keys_folder

# Settings
bitcoind_version="22.0"
bitcoind_folder="bitcoind"
bitcoind_keys_folder="bitcoind-pub-keys"
bitcoind_data_file="${bitcoind_folder}/bitcoin-${bitcoind_version}-x86_64-linux-gnu.tar.gz"
bitcoind_SHA256_file="${bitcoind_folder}/SHA256SUMS"
bitcoind_sig_file="${bitcoind_folder}/SHA256SUMS.asc"


# Key trust settings
#   The verification will fail unless all keys listed in $bitcoind_trusted_key_hashes check out
#   The script will ignore verifying keys listed in $bitcoind_untrusted_key_hashes
#   From the remaining keys (all keys - trusted keys - untrusted keys) at least $bitcoind_acceptable_fails number of keys needs to check out
bitcoind_trusted_key_hashes="152812300785C96444D3334D17565732E08E5E41 D1DBF2C4B96F2DEBF4C16654410108112E7EA81F CFB16E21C950F67FA95E558F2EEB9F5CC09526C1"
bitcoind_untrusted_key_hashes="0CCBAAFD76A2ECE2CCD3141DE2FFD5B1D88CA97D"
bitcoind_min_confirm=4

# Output deciding variables (not settings):
trusted=0
confirmed=0

# Downloads a file if it does not already exist, exits if the download fails
# Usage:
#  download URL FOLDERNAME FILENAME
download() {
    # Download source code (unless it already exists)
    if [ ! -f $2/$3 ]; then
        wget -q --https-only $1 --directory-prefix $2/

        # check that the download succeeded
        if [ $? -ne 0 ]; then
            echo "  Could not download $1"
            exit 1
        else
            echo "  Downloaded $2/$2"
        fi
    else
        echo "  Using existing $2/$3"
    fi
}


## Download source code
bitcoind_begin() {
    echo "$FUNCNAME: BEGIN"

    # Create folder for the bitcoind files
    mkdir --parents $bitcoind_folder
    chmod --recursive 700 $bitcoind_folder
    test -d $bitcoind_folder

    echo "$FUNCNAME: Downloading source files"

    download https://bitcoincore.org/bin/bitcoin-core-${bitcoind_version}/bitcoin-${bitcoind_version}-x86_64-linux-gnu.tar.gz \
        $bitcoind_folder \
        bitcoin-${bitcoind_version}-x86_64-linux-gnu.tar.gz

    download https://bitcoincore.org/bin/bitcoin-core-${bitcoind_version}/SHA256SUMS \
        $bitcoind_folder \
        SHA256SUMS

    download https://bitcoincore.org/bin/bitcoin-core-${bitcoind_version}/SHA256SUMS.asc \
        $bitcoind_folder \
        SHA256SUMS.asc


    echo "$FUNCNAME: Verifying archive checksum"
    (
    cd $bitcoind_folder || exit 1
    if ! sha256sum --status --ignore-missing --check SHA256SUMS; then
        echo "  File integrity check failed" >&2
        exit 1
    else
        echo "  Checksum OK"
    fi
    )

    ## Include gpg-bash
    source "../gpg-bash"

    echo "$FUNCNAME: END"
}


## Split the signatures in the .asc file and each for verification
bitcoind_verification() {
    echo "$FUNCNAME: BEGIN"

    sig=""
    started=true
    i=0
    while read -r line; do
        if [ "$line" = "-----BEGIN PGP SIGNATURE-----" ]; then
            started=true
        elif [ "$line" = "-----END PGP SIGNATURE-----" ]; then
            started=false
            # add ending
            sig="${sig}${line}
"
            verify_signature $i "$sig"
            sig=""
            i=$((i+1))
        fi
        if [ "$started" = true ]; then
            sig="${sig}${line}
"
        fi
    done < $bitcoind_sig_file

    echo "$FUNCNAME: END"
}


verify_signature() {
    echo "$FUNCNAME: BEGIN"

    # Save the output in a temporary signature file containing only one signature
    tmp_signature_file=$(mktemp /tmp/verify_bitcoind.XXXXXX)
    # echo "Debug:"
    # printf "%u\n$2" $1
    # echo "\$2=" "$2"
    # echo "\$tmp_signature_file=$tmp_signature_file"
    # echo "$2" > $tmp_signature_file
    # cat $tmp_signature_file

    ## Set up gpg-bash
    gpg_bash_lib_input_key_import_dir=$bitcoind_keys_folder
    gpg_bash_lib_input_file_name_enforce="true"
    gpg_bash_lib_input_cleanup="true"
    gpg_bash_lib_input_data_file=$bitcoind_SHA256_file    # We are actually not verifyting the archive but the only the SHA256SUMS file here
    gpg_bash_lib_input_sig_file=$tmp_signature_file

    ## Run gpg-bash to let it do the verification for you.
    gpg_bash_lib_function_main_verify

    rm "$tmp_signature_file"

    bitcoind_check_output

    echo "$FUNCNAME: END"
}


bitcoind_check_output() {
    echo "$FUNCNAME: BEGIN"

    ## This is an example on how you can access variables, that gpg-bash has
    ## set for you. There are more variables available. Those are listed in
    ## the documentation.

    echo "\
gpg_bash_lib_output_failure_status: $gpg_bash_lib_output_failure_status
gpg_bash_lib_output_gpg_verify_exit_code: $gpg_bash_lib_output_gpg_verify_exit_code
gpg_bash_lib_output_validsig_status: $gpg_bash_lib_output_validsig_status
gpg_bash_lib_output_fingerprint_in_hex: $gpg_bash_lib_output_fingerprint_in_hex
gpg_bash_lib_output_signed_on_unixtime: $gpg_bash_lib_output_signed_on_unixtime
gpg_bash_lib_output_signed_on_date: $gpg_bash_lib_output_signed_on_date
gpg_bash_lib_output_notation[$"file@name"]: ${gpg_bash_lib_output_notation[$"file@name"]}
gpg_bash_lib_output_file_name_tampering: $gpg_bash_lib_output_file_name_tampering
gpg_bash_lib_output_freshness_status: $gpg_bash_lib_output_freshness_status
gpg_bash_lib_output_freshness_detail: $gpg_bash_lib_output_freshness_detail
gpg_bash_lib_output_freshness_msg:
$gpg_bash_lib_output_freshness_msg
gpg_bash_lib_output_alright_status: $gpg_bash_lib_output_alright_status"

    # Find a way to check the key fingerprint that was used to sign the signture

    # if in bitcoind_untrusted_key_hashes
    #    ignore
    # else
    #    if signature valid
    #       if in bitcoind_trusted_key_hashes
    #           trusted++
    #       else
    #           confirmed++
    #       fi
    #    fi
    # fi




    echo "$FUNCNAME: END"
}


bitcoind_decide() {

    echo "make decision here"
    #number_of_hashes_in_trusted=count_somehow
    # if trusted == number_of_hashes_in_trusted && confirmed >= bitcoin_min_confirm

}


bitcoind_begin
bitcoind_verification
bitcoind_decide
